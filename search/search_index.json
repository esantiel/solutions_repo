{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Let\u2019s dive into this investigation of how the range of a projectile depends on the angle of projection. We\u2019ll proceed step-by-step through the theoretical foundation, range analysis, practical applications, and computational implementation, keeping the physics clear and engaging. 1. Theoretical Foundation Projectile motion is a classic two-dimensional problem governed by Newton\u2019s laws under constant gravitational acceleration. Let\u2019s derive the equations from first principles. Deriving the Equations of Motion Assume a projectile is launched from the origin (x\u2080 = 0, y\u2080 = 0) with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) above the horizontal, and the only force acting is gravity (acceleration \\(g\\) downward). We\u2019ll neglect air resistance for now. Break the initial velocity into components: Horizontal: \\(v_{0x} = v_0 \\cos\\theta\\) Vertical: \\(v_{0y} = v_0 \\sin\\theta\\) The acceleration due to gravity acts only in the vertical direction: \\(a_x = 0\\) \\(a_y = -g\\) Using kinematics (or integrating the accelerations), the velocity and position as functions of time \\(t\\) are: - Horizontal: \\(v_x(t) = v_{0x} = v_0 \\cos\\theta\\) (constant, since \\(a_x = 0\\) ) \\(x(t) = v_{0x} t = v_0 \\cos\\theta \\cdot t\\) Vertical: \\(v_y(t) = v_{0y} + a_y t = v_0 \\sin\\theta - g t\\) \\(y(t) = v_{0y} t + \\frac{1}{2} a_y t^2 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) These are parametric equations describing a parabolic trajectory. The family of solutions emerges from varying \\(v_0\\) , \\(\\theta\\) , and \\(g\\) . For instance, a higher \\(v_0\\) stretches the parabola, while a larger \\(g\\) compresses it vertically. Simulation 2. Analysis of the Range The range \\(R\\) is the horizontal distance traveled when the projectile returns to \\(y = 0\\) (assuming launch and landing at the same height). Time of Flight Set \\(y(t) = 0\\) to find the time when the projectile hits the ground: \\[0 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\] Factor out \\(t\\) : \\[t (v_0 \\sin\\theta - \\frac{1}{2} g t) = 0\\] Solutions: \\(t = 0\\) (launch) \\(t = \\frac{2 v_0 \\sin\\theta}{g}\\) (landing) This \\(t = \\frac{2 v_0 \\sin\\theta}{g}\\) is the time of flight. Range Equation Substitute into the horizontal position: \\[R = x(t) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g}\\] Using the identity \\(2 \\sin\\theta \\cos\\theta = \\sin 2\\theta\\) : \\[R = \\frac{v_0^2 \\sin 2\\theta}{g}\\] Dependence on Angle Maximum Range : \\(R\\) is maximized when \\(\\sin 2\\theta = 1\\) , so \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) . Then: \\( \\(R_{\\text{max}} = \\frac{v_0^2}{g}\\) \\) Symmetry : \\(R(\\theta) = R(90^\\circ - \\theta)\\) , since \\(\\sin 2(90^\\circ - \\theta) = \\sin (180^\\circ - 2\\theta) = \\sin 2\\theta\\) . E.g., ranges at 30\u00b0 and 60\u00b0 are equal. Extremes : At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(\\sin 2\\theta = 0\\) , so \\(R = 0\\) . Other Parameters Initial Velocity ( \\(v_0\\) ) : Range scales with \\(v_0^2\\) , so doubling \\(v_0\\) quadruples \\(R\\) . Gravity ( \\(g\\) ) : Range is inversely proportional to \\(g\\) . On the Moon ( \\(g \\approx 1.62 \\, \\text{m/s}^2\\) ), range is about 6 times that on Earth ( \\(g \\approx 9.8 \\, \\text{m/s}^2\\) ). 3. Practical Applications This model simplifies real-world scenarios but can be adapted: - Uneven Terrain : If launched from height \\(h\\) , the time to reach \\(y = -h\\) changes. Solve: \\( \\(-h = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) \\) This quadratic in \\(t\\) adjusts the range, often increasing it for downward slopes. - Air Resistance : Introduces a drag force proportional to velocity (or its square), requiring numerical solutions. Range typically decreases, and the optimal angle shifts below 45\u00b0. - Examples : - Sports : A soccer ball\u2019s range depends on kick angle and speed, modified by spin and air effects. - Artillery : Cannons adjust angles for range, accounting for wind and elevation. - Space : Rockets use initial angles, but thrust and gravity variations dominate. 4. Implementation Let\u2019s simulate this computationally and visualize the range. Here\u2019s a Python snippet using NumPy and Matplotlib: import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 20.0 # initial velocity (m/s) g = 9.8 # gravity (m/s^2) theta_deg = np.linspace(0, 90, 91) # angles from 0\u00b0 to 90\u00b0 theta_rad = np.radians(theta_deg) # Range function R = (v0**2 * np.sin(2 * theta_rad)) / g # Plot plt.plot(theta_deg, R, label=f'v\u2080 = {v0} m/s, g = {g} m/s\u00b2') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.grid(True) plt.legend() plt.show() # Optimal angle max_idx = np.argmax(R) print(f\"Maximum range {R[max_idx]:.2f} m at {theta_deg[max_idx]}\u00b0\") Visualization Insights For \\(v_0 = 20 \\, \\text{m/s}\\) , \\(g = 9.8 \\, \\text{m/s}^2\\) , the plot shows a peak at 45\u00b0, with \\(R_{\\text{max}} \\approx 40.8 \\, \\text{m}\\) . Try \\(v_0 = 40 \\, \\text{m/s}\\) or \\(g = 1.62 \\, \\text{m/s}^2\\) to see scaling effects. Extensions Add a loop to plot multiple \\(v_0\\) or \\(g\\) values. Simulate trajectories \\((x(t), y(t))\\) parametrically for selected angles. Conclusion The range\u2019s dependence on \\(\\theta\\) via \\(\\sin 2\\theta\\) is both elegant and practical, peaking at 45\u00b0 under ideal conditions. Variations in \\(v_0\\) and \\(g\\) amplify or shrink this relationship, while real-world factors like height or drag enrich the problem. This blend of theory, analysis, and simulation makes projectile motion a timeless physics gem. Let me know if you\u2019d like to tweak parameters, generate a specific plot, or dive deeper into any part!","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Let\u2019s dive into this investigation of how the range of a projectile depends on the angle of projection. We\u2019ll proceed step-by-step through the theoretical foundation, range analysis, practical applications, and computational implementation, keeping the physics clear and engaging.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is a classic two-dimensional problem governed by Newton\u2019s laws under constant gravitational acceleration. Let\u2019s derive the equations from first principles.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deriving-the-equations-of-motion","text":"Assume a projectile is launched from the origin (x\u2080 = 0, y\u2080 = 0) with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) above the horizontal, and the only force acting is gravity (acceleration \\(g\\) downward). We\u2019ll neglect air resistance for now. Break the initial velocity into components: Horizontal: \\(v_{0x} = v_0 \\cos\\theta\\) Vertical: \\(v_{0y} = v_0 \\sin\\theta\\) The acceleration due to gravity acts only in the vertical direction: \\(a_x = 0\\) \\(a_y = -g\\) Using kinematics (or integrating the accelerations), the velocity and position as functions of time \\(t\\) are: - Horizontal: \\(v_x(t) = v_{0x} = v_0 \\cos\\theta\\) (constant, since \\(a_x = 0\\) ) \\(x(t) = v_{0x} t = v_0 \\cos\\theta \\cdot t\\) Vertical: \\(v_y(t) = v_{0y} + a_y t = v_0 \\sin\\theta - g t\\) \\(y(t) = v_{0y} t + \\frac{1}{2} a_y t^2 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) These are parametric equations describing a parabolic trajectory. The family of solutions emerges from varying \\(v_0\\) , \\(\\theta\\) , and \\(g\\) . For instance, a higher \\(v_0\\) stretches the parabola, while a larger \\(g\\) compresses it vertically. Simulation","title":"Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range \\(R\\) is the horizontal distance traveled when the projectile returns to \\(y = 0\\) (assuming launch and landing at the same height).","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"Set \\(y(t) = 0\\) to find the time when the projectile hits the ground: \\[0 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\] Factor out \\(t\\) : \\[t (v_0 \\sin\\theta - \\frac{1}{2} g t) = 0\\] Solutions: \\(t = 0\\) (launch) \\(t = \\frac{2 v_0 \\sin\\theta}{g}\\) (landing) This \\(t = \\frac{2 v_0 \\sin\\theta}{g}\\) is the time of flight.","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-equation","text":"Substitute into the horizontal position: \\[R = x(t) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g}\\] Using the identity \\(2 \\sin\\theta \\cos\\theta = \\sin 2\\theta\\) : \\[R = \\frac{v_0^2 \\sin 2\\theta}{g}\\]","title":"Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle","text":"Maximum Range : \\(R\\) is maximized when \\(\\sin 2\\theta = 1\\) , so \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) . Then: \\( \\(R_{\\text{max}} = \\frac{v_0^2}{g}\\) \\) Symmetry : \\(R(\\theta) = R(90^\\circ - \\theta)\\) , since \\(\\sin 2(90^\\circ - \\theta) = \\sin (180^\\circ - 2\\theta) = \\sin 2\\theta\\) . E.g., ranges at 30\u00b0 and 60\u00b0 are equal. Extremes : At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(\\sin 2\\theta = 0\\) , so \\(R = 0\\) .","title":"Dependence on Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#other-parameters","text":"Initial Velocity ( \\(v_0\\) ) : Range scales with \\(v_0^2\\) , so doubling \\(v_0\\) quadruples \\(R\\) . Gravity ( \\(g\\) ) : Range is inversely proportional to \\(g\\) . On the Moon ( \\(g \\approx 1.62 \\, \\text{m/s}^2\\) ), range is about 6 times that on Earth ( \\(g \\approx 9.8 \\, \\text{m/s}^2\\) ).","title":"Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"This model simplifies real-world scenarios but can be adapted: - Uneven Terrain : If launched from height \\(h\\) , the time to reach \\(y = -h\\) changes. Solve: \\( \\(-h = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) \\) This quadratic in \\(t\\) adjusts the range, often increasing it for downward slopes. - Air Resistance : Introduces a drag force proportional to velocity (or its square), requiring numerical solutions. Range typically decreases, and the optimal angle shifts below 45\u00b0. - Examples : - Sports : A soccer ball\u2019s range depends on kick angle and speed, modified by spin and air effects. - Artillery : Cannons adjust angles for range, accounting for wind and elevation. - Space : Rockets use initial angles, but thrust and gravity variations dominate.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Let\u2019s simulate this computationally and visualize the range. Here\u2019s a Python snippet using NumPy and Matplotlib: import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 20.0 # initial velocity (m/s) g = 9.8 # gravity (m/s^2) theta_deg = np.linspace(0, 90, 91) # angles from 0\u00b0 to 90\u00b0 theta_rad = np.radians(theta_deg) # Range function R = (v0**2 * np.sin(2 * theta_rad)) / g # Plot plt.plot(theta_deg, R, label=f'v\u2080 = {v0} m/s, g = {g} m/s\u00b2') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.grid(True) plt.legend() plt.show() # Optimal angle max_idx = np.argmax(R) print(f\"Maximum range {R[max_idx]:.2f} m at {theta_deg[max_idx]}\u00b0\")","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#visualization-insights","text":"For \\(v_0 = 20 \\, \\text{m/s}\\) , \\(g = 9.8 \\, \\text{m/s}^2\\) , the plot shows a peak at 45\u00b0, with \\(R_{\\text{max}} \\approx 40.8 \\, \\text{m}\\) . Try \\(v_0 = 40 \\, \\text{m/s}\\) or \\(g = 1.62 \\, \\text{m/s}^2\\) to see scaling effects.","title":"Visualization Insights"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#extensions","text":"Add a loop to plot multiple \\(v_0\\) or \\(g\\) values. Simulate trajectories \\((x(t), y(t))\\) parametrically for selected angles.","title":"Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"The range\u2019s dependence on \\(\\theta\\) via \\(\\sin 2\\theta\\) is both elegant and practical, peaking at 45\u00b0 under ideal conditions. Variations in \\(v_0\\) and \\(g\\) amplify or shrink this relationship, while real-world factors like height or drag enrich the problem. This blend of theory, analysis, and simulation makes projectile motion a timeless physics gem. Let me know if you\u2019d like to tweak parameters, generate a specific plot, or dive deeper into any part!","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Let\u2019s dive into the fascinating dynamics of a forced damped pendulum. This system is a treasure trove of physical phenomena, blending theory, computation, and real-world relevance. Below, I\u2019ll provide a comprehensive response in Markdown format, including a Python script for simulation, detailed explanations, and visualizations as requested. I\u2019ll also embed the code in a way that\u2019s ready for a notebook or standalone use. Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum is a nonlinear oscillator that evolves from the simple pendulum by adding damping (energy dissipation) and external periodic forcing. This introduces complexity, revealing behaviors like resonance, quasiperiodicity, and chaos. These dynamics mirror real-world systems\u2014think suspension bridges swaying in the wind, energy harvesters capturing vibrations, or even chaotic weather patterns. By tweaking parameters like damping, forcing amplitude, and frequency, we unlock a spectrum of motions that are both mathematically intriguing and practically significant. Simulation Task Breakdown 1. Theoretical Foundation Governing Equation The motion of a pendulum of length \\(L\\) with mass \\(m\\) , subject to gravitational acceleration \\(g\\) , damping coefficient \\(b\\) , and an external force \\(F(t) = F_0 \\cos(\\omega t)\\) , is governed by: \\[m L \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + m g \\sin\\theta = F_0 \\cos(\\omega t)\\] Dividing through by \\(m L\\) : \\[\\frac{d^2\\theta}{dt^2} + \\frac{b}{m} \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = \\frac{F_0}{m L} \\cos(\\omega t)\\] Define: \\(\\gamma = \\frac{b}{m}\\) (damping per unit mass), \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) (natural frequency), \\(f = \\frac{F_0}{m L}\\) (forcing amplitude per unit mass). The equation becomes: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = f \\cos(\\omega t)\\] This is a nonlinear second-order differential equation due to \\(\\sin\\theta\\) . Small-Angle Approximation For small \\(\\theta\\) , \\(\\sin\\theta \\approx \\theta\\) , simplifying to: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = f \\cos(\\omega t)\\] This is a linear, driven damped harmonic oscillator. Rewrite as a system: \\(\\dot{\\theta} = v\\) \\(\\dot{v} = -\\omega_0^2 \\theta - \\gamma v + f \\cos(\\omega t)\\) The general solution has a homogeneous part (transient, decaying oscillation) and a particular part (steady-state response). For the steady state: \\[\\theta_p(t) = A \\cos(\\omega t - \\phi)\\] Amplitude \\(A\\) peaks at resonance, when \\(\\omega \\approx \\omega_0\\) , modified by damping: \\[A = \\frac{f}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}}\\] Phase \\(\\phi = \\tan^{-1}\\left(\\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) . Resonance amplifies energy input when driving frequency matches the natural frequency, adjusted by damping. Nonlinear Case Beyond small angles, \\(\\sin\\theta\\) introduces nonlinearity, leading to complex behaviors like chaos, which we\u2019ll explore numerically. 2. Analysis of Dynamics Parameter Effects Damping ( \\(\\gamma\\) ) : Low damping allows sustained oscillations or chaos; high damping suppresses motion to the forcing rhythm. Driving Amplitude ( \\(f\\) ) : Small \\(f\\) yields periodic motion; large \\(f\\) can drive the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance boosts amplitude; far from \\(\\omega_0\\) , motion may synchronize or become chaotic. Transition to Chaos Periodic Motion : At low \\(f\\) and \\(\\omega \\approx \\omega_0\\) , motion synchronizes with the drive. Quasiperiodic Motion : Multiple incommensurate frequencies emerge with moderate forcing. Chaotic Motion : High \\(f\\) and specific \\(\\omega\\) lead to unpredictable, aperiodic trajectories, sensitive to initial conditions. 3. Practical Applications Energy Harvesting : Piezoelectric devices use forced oscillations to convert vibrations into electricity. Suspension Bridges : Wind acts as a periodic force; damping prevents destructive resonance (e.g., Tacoma Narrows). Circuits : Driven RLC circuits mimic this behavior, with voltage as the forcing term. 4. Implementation Python Simulation We\u2019ll use the 4th-order Runge-Kutta (RK4) method to solve the nonlinear equation numerically and visualize the results. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Pendulum parameters g = 9.8 # gravity (m/s^2) L = 1.0 # length (m) omega0 = np.sqrt(g / L) # natural frequency # System dynamics def pendulum_deriv(state, t, gamma, f, omega): theta, v = state dtheta_dt = v dv_dt = -omega0**2 * np.sin(theta) - gamma * v + f * np.cos(omega * t) return [dtheta_dt, dv_dt] # Simulation parameters t = np.linspace(0, 50, 1000) # time array initial_conditions = [0.1, 0] # [theta0, v0] # Cases to explore cases = [ {\"gamma\": 0.1, \"f\": 0.5, \"omega\": omega0, \"label\": \"Resonance\"}, {\"gamma\": 0.5, \"f\": 1.2, \"omega\": 1.5, \"label\": \"Moderate Forcing\"}, {\"gamma\": 0.2, \"f\": 2.5, \"omega\": 1.2, \"label\": \"Chaotic\"} ] # Simulate and plot plt.figure(figsize=(15, 10)) # Time series plt.subplot(2, 2, 1) for case in cases: sol = odeint(pendulum_deriv, initial_conditions, t, args=(case[\"gamma\"], case[\"f\"], case[\"omega\"])) theta = sol[:, 0] plt.plot(t, theta, label=case[\"label\"]) plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Time Series\") plt.legend() plt.grid() # Phase portrait plt.subplot(2, 2, 2) for case in cases: sol = odeint(pendulum_deriv, initial_conditions, t, args=(case[\"gamma\"], case[\"f\"], case[\"omega\"])) theta, v = sol[:, 0], sol[:, 1] plt.plot(theta, v, label=case[\"label\"], alpha=0.5) plt.xlabel(\"Angle (rad)\") plt.ylabel(\"Velocity (rad/s)\") plt.title(\"Phase Portrait\") plt.legend() plt.grid() # Poincar\u00e9 section (sample at driving period) plt.subplot(2, 2, 3) for case in cases: T = 2 * np.pi / case[\"omega\"] # driving period t_dense = np.linspace(0, 50, 10000) sol = odeint(pendulum_deriv, initial_conditions, t_dense, args=(case[\"gamma\"], case[\"f\"], case[\"omega\"])) theta, v = sol[:, 0], sol[:, 1] sample_times = np.arange(0, 50, T) indices = np.searchsorted(t_dense, sample_times) plt.scatter(theta[indices], v[indices], s=5, label=case[\"label\"], alpha=0.5) plt.xlabel(\"Angle (rad)\") plt.ylabel(\"Velocity (rad/s)\") plt.title(\"Poincar\u00e9 Section\") plt.legend() plt.grid() plt.tight_layout() plt.show() # Bifurcation diagram (vary f, sample theta at driving period) f_values = np.linspace(0, 3, 400) theta_samples = [] gamma, omega = 0.5, 1.2 t_dense = np.linspace(0, 100, 20000) # longer time for steady state T = 2 * np.pi / omega for f in f_values: sol = odeint(pendulum_deriv, initial_conditions, t_dense, args=(gamma, f, omega)) theta = sol[:, 0] sample_times = np.arange(50, 100, T) # after transient indices = np.searchsorted(t_dense, sample_times) theta_samples.append(theta[indices]) plt.figure(figsize=(10, 6)) for i, f in enumerate(f_values): plt.scatter([f] * len(theta_samples[i]), theta_samples[i], s=1, c=\"black\", alpha=0.1) plt.xlabel(\"Driving Amplitude (f)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Bifurcation Diagram\") plt.grid() plt.show() Deliverables General Solutions Small Angles : Linear solution shows transient decay plus steady-state oscillation, peaking at resonance. Nonlinear : Numerical solutions reveal periodic, quasiperiodic, or chaotic motion depending on parameters. Graphical Representations Time Series : Shows resonance (large amplitude at \\(\\omega = \\omega_0\\) ), moderate forcing (steady oscillation), and chaos (irregular motion). Phase Portrait : Resonance traces a spiral or ellipse; chaos fills a region unpredictably. Poincar\u00e9 Section : Periodic motion yields few points; chaos shows a scattered pattern. Bifurcation Diagram : As \\(f\\) increases, motion transitions from periodic to chaotic, with period-doubling visible. Limitations and Extensions Limitations : Assumes constant \\(g\\) , no air resistance beyond linear damping, and periodic forcing. Extensions : Add nonlinear damping ( \\(\\gamma v^2\\) ), non-periodic forcing, or couple multiple pendulums. Discussion The forced damped pendulum bridges simple oscillators and chaotic systems. Resonance amplifies energy transfer, critical for engineering design, while chaos highlights sensitivity to conditions, relevant in climate modeling or cryptography. The visualizations\u2014phase portraits, Poincar\u00e9 sections, and bifurcation diagrams\u2014offer intuitive insights into these transitions, making this a powerful educational and practical tool. Let me know if you\u2019d like to adjust parameters, explore specific cases, or convert this to another format!","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"Let\u2019s dive into the fascinating dynamics of a forced damped pendulum. This system is a treasure trove of physical phenomena, blending theory, computation, and real-world relevance. Below, I\u2019ll provide a comprehensive response in Markdown format, including a Python script for simulation, detailed explanations, and visualizations as requested. I\u2019ll also embed the code in a way that\u2019s ready for a notebook or standalone use.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a nonlinear oscillator that evolves from the simple pendulum by adding damping (energy dissipation) and external periodic forcing. This introduces complexity, revealing behaviors like resonance, quasiperiodicity, and chaos. These dynamics mirror real-world systems\u2014think suspension bridges swaying in the wind, energy harvesters capturing vibrations, or even chaotic weather patterns. By tweaking parameters like damping, forcing amplitude, and frequency, we unlock a spectrum of motions that are both mathematically intriguing and practically significant. Simulation","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#task-breakdown","text":"","title":"Task Breakdown"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The motion of a pendulum of length \\(L\\) with mass \\(m\\) , subject to gravitational acceleration \\(g\\) , damping coefficient \\(b\\) , and an external force \\(F(t) = F_0 \\cos(\\omega t)\\) , is governed by: \\[m L \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + m g \\sin\\theta = F_0 \\cos(\\omega t)\\] Dividing through by \\(m L\\) : \\[\\frac{d^2\\theta}{dt^2} + \\frac{b}{m} \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = \\frac{F_0}{m L} \\cos(\\omega t)\\] Define: \\(\\gamma = \\frac{b}{m}\\) (damping per unit mass), \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) (natural frequency), \\(f = \\frac{F_0}{m L}\\) (forcing amplitude per unit mass). The equation becomes: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = f \\cos(\\omega t)\\] This is a nonlinear second-order differential equation due to \\(\\sin\\theta\\) .","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small \\(\\theta\\) , \\(\\sin\\theta \\approx \\theta\\) , simplifying to: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = f \\cos(\\omega t)\\] This is a linear, driven damped harmonic oscillator. Rewrite as a system: \\(\\dot{\\theta} = v\\) \\(\\dot{v} = -\\omega_0^2 \\theta - \\gamma v + f \\cos(\\omega t)\\) The general solution has a homogeneous part (transient, decaying oscillation) and a particular part (steady-state response). For the steady state: \\[\\theta_p(t) = A \\cos(\\omega t - \\phi)\\] Amplitude \\(A\\) peaks at resonance, when \\(\\omega \\approx \\omega_0\\) , modified by damping: \\[A = \\frac{f}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}}\\] Phase \\(\\phi = \\tan^{-1}\\left(\\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) . Resonance amplifies energy input when driving frequency matches the natural frequency, adjusted by damping.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#nonlinear-case","text":"Beyond small angles, \\(\\sin\\theta\\) introduces nonlinearity, leading to complex behaviors like chaos, which we\u2019ll explore numerically.","title":"Nonlinear Case"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-effects","text":"Damping ( \\(\\gamma\\) ) : Low damping allows sustained oscillations or chaos; high damping suppresses motion to the forcing rhythm. Driving Amplitude ( \\(f\\) ) : Small \\(f\\) yields periodic motion; large \\(f\\) can drive the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance boosts amplitude; far from \\(\\omega_0\\) , motion may synchronize or become chaotic.","title":"Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"Periodic Motion : At low \\(f\\) and \\(\\omega \\approx \\omega_0\\) , motion synchronizes with the drive. Quasiperiodic Motion : Multiple incommensurate frequencies emerge with moderate forcing. Chaotic Motion : High \\(f\\) and specific \\(\\omega\\) lead to unpredictable, aperiodic trajectories, sensitive to initial conditions.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy Harvesting : Piezoelectric devices use forced oscillations to convert vibrations into electricity. Suspension Bridges : Wind acts as a periodic force; damping prevents destructive resonance (e.g., Tacoma Narrows). Circuits : Driven RLC circuits mimic this behavior, with voltage as the forcing term.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-simulation","text":"We\u2019ll use the 4th-order Runge-Kutta (RK4) method to solve the nonlinear equation numerically and visualize the results. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Pendulum parameters g = 9.8 # gravity (m/s^2) L = 1.0 # length (m) omega0 = np.sqrt(g / L) # natural frequency # System dynamics def pendulum_deriv(state, t, gamma, f, omega): theta, v = state dtheta_dt = v dv_dt = -omega0**2 * np.sin(theta) - gamma * v + f * np.cos(omega * t) return [dtheta_dt, dv_dt] # Simulation parameters t = np.linspace(0, 50, 1000) # time array initial_conditions = [0.1, 0] # [theta0, v0] # Cases to explore cases = [ {\"gamma\": 0.1, \"f\": 0.5, \"omega\": omega0, \"label\": \"Resonance\"}, {\"gamma\": 0.5, \"f\": 1.2, \"omega\": 1.5, \"label\": \"Moderate Forcing\"}, {\"gamma\": 0.2, \"f\": 2.5, \"omega\": 1.2, \"label\": \"Chaotic\"} ] # Simulate and plot plt.figure(figsize=(15, 10)) # Time series plt.subplot(2, 2, 1) for case in cases: sol = odeint(pendulum_deriv, initial_conditions, t, args=(case[\"gamma\"], case[\"f\"], case[\"omega\"])) theta = sol[:, 0] plt.plot(t, theta, label=case[\"label\"]) plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Time Series\") plt.legend() plt.grid() # Phase portrait plt.subplot(2, 2, 2) for case in cases: sol = odeint(pendulum_deriv, initial_conditions, t, args=(case[\"gamma\"], case[\"f\"], case[\"omega\"])) theta, v = sol[:, 0], sol[:, 1] plt.plot(theta, v, label=case[\"label\"], alpha=0.5) plt.xlabel(\"Angle (rad)\") plt.ylabel(\"Velocity (rad/s)\") plt.title(\"Phase Portrait\") plt.legend() plt.grid() # Poincar\u00e9 section (sample at driving period) plt.subplot(2, 2, 3) for case in cases: T = 2 * np.pi / case[\"omega\"] # driving period t_dense = np.linspace(0, 50, 10000) sol = odeint(pendulum_deriv, initial_conditions, t_dense, args=(case[\"gamma\"], case[\"f\"], case[\"omega\"])) theta, v = sol[:, 0], sol[:, 1] sample_times = np.arange(0, 50, T) indices = np.searchsorted(t_dense, sample_times) plt.scatter(theta[indices], v[indices], s=5, label=case[\"label\"], alpha=0.5) plt.xlabel(\"Angle (rad)\") plt.ylabel(\"Velocity (rad/s)\") plt.title(\"Poincar\u00e9 Section\") plt.legend() plt.grid() plt.tight_layout() plt.show() # Bifurcation diagram (vary f, sample theta at driving period) f_values = np.linspace(0, 3, 400) theta_samples = [] gamma, omega = 0.5, 1.2 t_dense = np.linspace(0, 100, 20000) # longer time for steady state T = 2 * np.pi / omega for f in f_values: sol = odeint(pendulum_deriv, initial_conditions, t_dense, args=(gamma, f, omega)) theta = sol[:, 0] sample_times = np.arange(50, 100, T) # after transient indices = np.searchsorted(t_dense, sample_times) theta_samples.append(theta[indices]) plt.figure(figsize=(10, 6)) for i, f in enumerate(f_values): plt.scatter([f] * len(theta_samples[i]), theta_samples[i], s=1, c=\"black\", alpha=0.1) plt.xlabel(\"Driving Amplitude (f)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Bifurcation Diagram\") plt.grid() plt.show()","title":"Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#deliverables","text":"","title":"Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#general-solutions","text":"Small Angles : Linear solution shows transient decay plus steady-state oscillation, peaking at resonance. Nonlinear : Numerical solutions reveal periodic, quasiperiodic, or chaotic motion depending on parameters.","title":"General Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#graphical-representations","text":"Time Series : Shows resonance (large amplitude at \\(\\omega = \\omega_0\\) ), moderate forcing (steady oscillation), and chaos (irregular motion). Phase Portrait : Resonance traces a spiral or ellipse; chaos fills a region unpredictably. Poincar\u00e9 Section : Periodic motion yields few points; chaos shows a scattered pattern. Bifurcation Diagram : As \\(f\\) increases, motion transitions from periodic to chaotic, with period-doubling visible.","title":"Graphical Representations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations-and-extensions","text":"Limitations : Assumes constant \\(g\\) , no air resistance beyond linear damping, and periodic forcing. Extensions : Add nonlinear damping ( \\(\\gamma v^2\\) ), non-periodic forcing, or couple multiple pendulums.","title":"Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#discussion","text":"The forced damped pendulum bridges simple oscillators and chaotic systems. Resonance amplifies energy transfer, critical for engineering design, while chaos highlights sensitivity to conditions, relevant in climate modeling or cryptography. The visualizations\u2014phase portraits, Poincar\u00e9 sections, and bifurcation diagrams\u2014offer intuitive insights into these transitions, making this a powerful educational and practical tool. Let me know if you\u2019d like to adjust parameters, explore specific cases, or convert this to another format!","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Let\u2019s explore the relationship between the orbital period and orbital radius, a beautiful manifestation of Kepler\u2019s Third Law, and bring it to life with theory, examples, and a computational model. Below is a comprehensive response in Markdown format, including a Python script for simulation and visualization, fulfilling all deliverables. Orbital Period and Orbital Radius Motivation Kepler\u2019s Third Law reveals a deep connection between the time a body takes to orbit (its period) and its distance from the central mass (its radius). Expressed as \\(T^2 \\propto r^3\\) for circular orbits, this relationship emerges from Newton\u2019s law of gravitation and circular motion dynamics. It\u2019s a key tool in astronomy, enabling us to measure planetary masses, map orbits, and understand gravitational systems\u2014from satellites to exoplanets. Its elegance lies in its simplicity, yet it unlocks profound insights into the cosmos. Simulation Task Breakdown 1. Derivation of the Relationship For a circular orbit, the gravitational force provides the centripetal force required to keep an object (mass \\(m\\) ) orbiting a central body (mass \\(M\\) ) at radius \\(r\\) . Gravitational Force \\[F_g = \\frac{G M m}{r^2}\\] where \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ). Centripetal Force For circular motion with orbital speed \\(v\\) and period \\(T\\) : \\[v = \\frac{2\\pi r}{T}\\] Centripetal force: \\[F_c = \\frac{m v^2}{r} = \\frac{m}{r} \\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{4\\pi^2 m r}{T^2}\\] Equate Forces \\[\\frac{G M m}{r^2} = \\frac{4\\pi^2 m r}{T^2}\\] Cancel \\(m\\) (assuming \\(m \\neq 0\\) ): \\[\\frac{G M}{r^2} = \\frac{4\\pi^2 r}{T^2}\\] Rearrange: \\[T^2 = \\frac{4\\pi^2}{G M} r^3\\] Thus: \\[T^2 = k r^3\\] where \\(k = \\frac{4\\pi^2}{G M}\\) is a constant for a given central mass \\(M\\) . This is Kepler\u2019s Third Law for circular orbits. 2. Implications for Astronomy Mass Determination : If \\(T\\) and \\(r\\) are measured (e.g., via observation), \\(M\\) can be calculated: \\( \\(M = \\frac{4\\pi^2 r^3}{G T^2}\\) \\) This is how we estimate the Sun\u2019s mass using Earth\u2019s orbit or Earth\u2019s mass using the Moon\u2019s orbit. - Distance Calculation : Knowing \\(T\\) and \\(M\\) , solve for \\(r\\) : \\( \\(r = \\left( \\frac{G M T^2}{4\\pi^2} \\right)^{1/3}\\) \\) System Scaling : For planets orbiting the Sun, \\(T^2 / r^3\\) is constant, allowing comparisons across the Solar System. 3. Real-World Examples Moon\u2019s Orbit Around Earth \\(r \\approx 384,400 \\, \\text{km} = 3.844 \\times 10^8 \\, \\text{m}\\) \\(T \\approx 27.32 \\, \\text{days} = 2.360 \\times 10^6 \\, \\text{s}\\) \\(M_{\\text{Earth}} \\approx 5.972 \\times 10^{24} \\, \\text{kg}\\) Check: \\[T^2 = (2.360 \\times 10^6)^2 = 5.570 \\times 10^{12} \\, \\text{s}^2\\] \\[r^3 = (3.844 \\times 10^8)^3 = 5.677 \\times 10^{25} \\, \\text{m}^3\\] \\[k = \\frac{T^2}{r^3} = \\frac{5.570 \\times 10^{12}}{5.677 \\times 10^{25}} \\approx 9.81 \\times 10^{-14} \\, \\text{s}^2 \\text{m}^{-3}\\] \\[M = \\frac{4\\pi^2}{G k} = \\frac{4\\pi^2}{6.67430 \\times 10^{-11} \\cdot 9.81 \\times 10^{-14}} \\approx 6.02 \\times 10^{24} \\, \\text{kg}\\] Close to Earth\u2019s actual mass, confirming the law. Earth\u2019s Orbit Around Sun \\(r \\approx 1 \\, \\text{AU} = 1.496 \\times 10^{11} \\, \\text{m}\\) \\(T \\approx 1 \\, \\text{year} = 3.156 \\times 10^7 \\, \\text{s}\\) \\(M_{\\text{Sun}} \\approx 1.989 \\times 10^{30} \\, \\text{kg}\\) Verify similarly; the constant matches the Sun\u2019s mass. 4. Computational Model Python Script import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # gravitational constant (m^3 kg^-1 s^-2) M_sun = 1.989e30 # Sun's mass (kg) M_earth = 5.972e24 # Earth's mass (kg) # Function to compute period from radius def orbital_period(r, M): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) # Function to compute radius from period def orbital_radius(T, M): return ((G * M * T**2) / (4 * np.pi**2))**(1/3) # Simulation data r_values = np.logspace(7, 12, 100) # radii from 10^7 to 10^12 meters T_sun = orbital_period(r_values, M_sun) / (24 * 3600) # convert to days T_earth = orbital_period(r_values, M_earth) / (24 * 3600) # Real-world examples bodies = [ {\"name\": \"Moon\", \"r\": 3.844e8, \"T\": 27.32, \"M\": M_earth}, {\"name\": \"Earth\", \"r\": 1.496e11, \"T\": 365.25, \"M\": M_sun}, {\"name\": \"Mars\", \"r\": 2.279e11, \"T\": 687, \"M\": M_sun} ] # Plotting plt.figure(figsize=(15, 5)) # T^2 vs r^3 relationship plt.subplot(1, 2, 1) plt.loglog(r_values**3, T_sun**2, label=\"Sun-centered orbits\") plt.loglog(r_values**3, T_earth**2, label=\"Earth-centered orbits\") for body in bodies: T_calc = orbital_period(body[\"r\"], body[\"M\"]) / (24 * 3600) plt.scatter(body[\"r\"]**3, T_calc**2, label=body[\"name\"]) plt.xlabel(\"Orbital Radius cubed (m\u00b3)\") plt.ylabel(\"Orbital Period squared (days\u00b2)\") plt.title(\"T\u00b2 vs r\u00b3 (Kepler's Third Law)\") plt.legend() plt.grid(True, which=\"both\", ls=\"--\") # Circular orbit visualization plt.subplot(1, 2, 2) for body in bodies: theta = np.linspace(0, 2 * np.pi, 100) x = body[\"r\"] * np.cos(theta) y = body[\"r\"] * np.sin(theta) plt.plot(x, y, label=f\"{body['name']} (r={body['r']/1e6:.1f} Mm)\") plt.plot(0, 0, 'ko', label=\"Central Body\") plt.xlabel(\"X (m)\") plt.ylabel(\"Y (m)\") plt.title(\"Circular Orbits\") plt.legend() plt.axis(\"equal\") plt.grid() plt.tight_layout() plt.show() # Verify examples for body in bodies: T_calc = orbital_period(body[\"r\"], body[\"M\"]) / (24 * 3600) print(f\"{body['name']}: T (observed) = {body['T']} days, T (calculated) = {T_calc:.2f} days\") Deliverables Explanation Derivation : \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) links period and radius via gravity and centripetal motion. Implications : Enables mass and distance calculations, foundational for astronomy. Examples : Moon, Earth, and Mars orbits align with the law, verifiable computationally. Graphical Representations T\u00b2 vs r\u00b3 Plot : Log-log scale shows linearity, with real bodies overlaid. Circular Orbits : Visualizes paths, scaled to show relative sizes. Extension to Elliptical Orbits Kepler\u2019s Third Law generalizes to elliptical orbits using the semi-major axis \\(a\\) instead of \\(r\\) : \\[T^2 = \\frac{4\\pi^2}{G M} a^3\\] For circular orbits, \\(a = r\\) , so the form holds. This applies to comets, exoplanets, and binary stars, with \\(M\\) as the total mass of the system. Discussion The \\(T^2 \\propto r^3\\) relationship is a triumph of classical physics, bridging Kepler\u2019s empirical discovery with Newton\u2019s mechanics. It assumes circular orbits and a dominant central mass, but extends robustly to elliptical cases. Limitations include neglecting relativistic effects (e.g., Mercury\u2019s precession) or multi-body interactions, which require perturbations or numerical methods. The simulation confirms the law across scales\u2014from the Moon to Mars\u2014making it a powerful tool for education and exploration. Adding velocity or elliptical paths could enhance it further. Let me know if you\u2019d like an HTML version or additional features!","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"Let\u2019s explore the relationship between the orbital period and orbital radius, a beautiful manifestation of Kepler\u2019s Third Law, and bring it to life with theory, examples, and a computational model. Below is a comprehensive response in Markdown format, including a Python script for simulation and visualization, fulfilling all deliverables.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Kepler\u2019s Third Law reveals a deep connection between the time a body takes to orbit (its period) and its distance from the central mass (its radius). Expressed as \\(T^2 \\propto r^3\\) for circular orbits, this relationship emerges from Newton\u2019s law of gravitation and circular motion dynamics. It\u2019s a key tool in astronomy, enabling us to measure planetary masses, map orbits, and understand gravitational systems\u2014from satellites to exoplanets. Its elegance lies in its simplicity, yet it unlocks profound insights into the cosmos. Simulation","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#task-breakdown","text":"","title":"Task Breakdown"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-derivation-of-the-relationship","text":"For a circular orbit, the gravitational force provides the centripetal force required to keep an object (mass \\(m\\) ) orbiting a central body (mass \\(M\\) ) at radius \\(r\\) .","title":"1. Derivation of the Relationship"},{"location":"1%20Physics/2%20Gravity/Problem_1/#gravitational-force","text":"\\[F_g = \\frac{G M m}{r^2}\\] where \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ).","title":"Gravitational Force"},{"location":"1%20Physics/2%20Gravity/Problem_1/#centripetal-force","text":"For circular motion with orbital speed \\(v\\) and period \\(T\\) : \\[v = \\frac{2\\pi r}{T}\\] Centripetal force: \\[F_c = \\frac{m v^2}{r} = \\frac{m}{r} \\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{4\\pi^2 m r}{T^2}\\]","title":"Centripetal Force"},{"location":"1%20Physics/2%20Gravity/Problem_1/#equate-forces","text":"\\[\\frac{G M m}{r^2} = \\frac{4\\pi^2 m r}{T^2}\\] Cancel \\(m\\) (assuming \\(m \\neq 0\\) ): \\[\\frac{G M}{r^2} = \\frac{4\\pi^2 r}{T^2}\\] Rearrange: \\[T^2 = \\frac{4\\pi^2}{G M} r^3\\] Thus: \\[T^2 = k r^3\\] where \\(k = \\frac{4\\pi^2}{G M}\\) is a constant for a given central mass \\(M\\) . This is Kepler\u2019s Third Law for circular orbits.","title":"Equate Forces"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-implications-for-astronomy","text":"Mass Determination : If \\(T\\) and \\(r\\) are measured (e.g., via observation), \\(M\\) can be calculated: \\( \\(M = \\frac{4\\pi^2 r^3}{G T^2}\\) \\) This is how we estimate the Sun\u2019s mass using Earth\u2019s orbit or Earth\u2019s mass using the Moon\u2019s orbit. - Distance Calculation : Knowing \\(T\\) and \\(M\\) , solve for \\(r\\) : \\( \\(r = \\left( \\frac{G M T^2}{4\\pi^2} \\right)^{1/3}\\) \\) System Scaling : For planets orbiting the Sun, \\(T^2 / r^3\\) is constant, allowing comparisons across the Solar System.","title":"2. Implications for Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-examples","text":"","title":"3. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#moons-orbit-around-earth","text":"\\(r \\approx 384,400 \\, \\text{km} = 3.844 \\times 10^8 \\, \\text{m}\\) \\(T \\approx 27.32 \\, \\text{days} = 2.360 \\times 10^6 \\, \\text{s}\\) \\(M_{\\text{Earth}} \\approx 5.972 \\times 10^{24} \\, \\text{kg}\\) Check: \\[T^2 = (2.360 \\times 10^6)^2 = 5.570 \\times 10^{12} \\, \\text{s}^2\\] \\[r^3 = (3.844 \\times 10^8)^3 = 5.677 \\times 10^{25} \\, \\text{m}^3\\] \\[k = \\frac{T^2}{r^3} = \\frac{5.570 \\times 10^{12}}{5.677 \\times 10^{25}} \\approx 9.81 \\times 10^{-14} \\, \\text{s}^2 \\text{m}^{-3}\\] \\[M = \\frac{4\\pi^2}{G k} = \\frac{4\\pi^2}{6.67430 \\times 10^{-11} \\cdot 9.81 \\times 10^{-14}} \\approx 6.02 \\times 10^{24} \\, \\text{kg}\\] Close to Earth\u2019s actual mass, confirming the law.","title":"Moon\u2019s Orbit Around Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#earths-orbit-around-sun","text":"\\(r \\approx 1 \\, \\text{AU} = 1.496 \\times 10^{11} \\, \\text{m}\\) \\(T \\approx 1 \\, \\text{year} = 3.156 \\times 10^7 \\, \\text{s}\\) \\(M_{\\text{Sun}} \\approx 1.989 \\times 10^{30} \\, \\text{kg}\\) Verify similarly; the constant matches the Sun\u2019s mass.","title":"Earth\u2019s Orbit Around Sun"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-computational-model","text":"","title":"4. Computational Model"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-script","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # gravitational constant (m^3 kg^-1 s^-2) M_sun = 1.989e30 # Sun's mass (kg) M_earth = 5.972e24 # Earth's mass (kg) # Function to compute period from radius def orbital_period(r, M): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) # Function to compute radius from period def orbital_radius(T, M): return ((G * M * T**2) / (4 * np.pi**2))**(1/3) # Simulation data r_values = np.logspace(7, 12, 100) # radii from 10^7 to 10^12 meters T_sun = orbital_period(r_values, M_sun) / (24 * 3600) # convert to days T_earth = orbital_period(r_values, M_earth) / (24 * 3600) # Real-world examples bodies = [ {\"name\": \"Moon\", \"r\": 3.844e8, \"T\": 27.32, \"M\": M_earth}, {\"name\": \"Earth\", \"r\": 1.496e11, \"T\": 365.25, \"M\": M_sun}, {\"name\": \"Mars\", \"r\": 2.279e11, \"T\": 687, \"M\": M_sun} ] # Plotting plt.figure(figsize=(15, 5)) # T^2 vs r^3 relationship plt.subplot(1, 2, 1) plt.loglog(r_values**3, T_sun**2, label=\"Sun-centered orbits\") plt.loglog(r_values**3, T_earth**2, label=\"Earth-centered orbits\") for body in bodies: T_calc = orbital_period(body[\"r\"], body[\"M\"]) / (24 * 3600) plt.scatter(body[\"r\"]**3, T_calc**2, label=body[\"name\"]) plt.xlabel(\"Orbital Radius cubed (m\u00b3)\") plt.ylabel(\"Orbital Period squared (days\u00b2)\") plt.title(\"T\u00b2 vs r\u00b3 (Kepler's Third Law)\") plt.legend() plt.grid(True, which=\"both\", ls=\"--\") # Circular orbit visualization plt.subplot(1, 2, 2) for body in bodies: theta = np.linspace(0, 2 * np.pi, 100) x = body[\"r\"] * np.cos(theta) y = body[\"r\"] * np.sin(theta) plt.plot(x, y, label=f\"{body['name']} (r={body['r']/1e6:.1f} Mm)\") plt.plot(0, 0, 'ko', label=\"Central Body\") plt.xlabel(\"X (m)\") plt.ylabel(\"Y (m)\") plt.title(\"Circular Orbits\") plt.legend() plt.axis(\"equal\") plt.grid() plt.tight_layout() plt.show() # Verify examples for body in bodies: T_calc = orbital_period(body[\"r\"], body[\"M\"]) / (24 * 3600) print(f\"{body['name']}: T (observed) = {body['T']} days, T (calculated) = {T_calc:.2f} days\")","title":"Python Script"},{"location":"1%20Physics/2%20Gravity/Problem_1/#deliverables","text":"","title":"Deliverables"},{"location":"1%20Physics/2%20Gravity/Problem_1/#explanation","text":"Derivation : \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) links period and radius via gravity and centripetal motion. Implications : Enables mass and distance calculations, foundational for astronomy. Examples : Moon, Earth, and Mars orbits align with the law, verifiable computationally.","title":"Explanation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graphical-representations","text":"T\u00b2 vs r\u00b3 Plot : Log-log scale shows linearity, with real bodies overlaid. Circular Orbits : Visualizes paths, scaled to show relative sizes.","title":"Graphical Representations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#extension-to-elliptical-orbits","text":"Kepler\u2019s Third Law generalizes to elliptical orbits using the semi-major axis \\(a\\) instead of \\(r\\) : \\[T^2 = \\frac{4\\pi^2}{G M} a^3\\] For circular orbits, \\(a = r\\) , so the form holds. This applies to comets, exoplanets, and binary stars, with \\(M\\) as the total mass of the system.","title":"Extension to Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#discussion","text":"The \\(T^2 \\propto r^3\\) relationship is a triumph of classical physics, bridging Kepler\u2019s empirical discovery with Newton\u2019s mechanics. It assumes circular orbits and a dominant central mass, but extends robustly to elliptical cases. Limitations include neglecting relativistic effects (e.g., Mercury\u2019s precession) or multi-body interactions, which require perturbations or numerical methods. The simulation confirms the law across scales\u2014from the Moon to Mars\u2014making it a powerful tool for education and exploration. Adding velocity or elliptical paths could enhance it further. Let me know if you\u2019d like an HTML version or additional features!","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}